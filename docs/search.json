[
  {
    "objectID": "index.html#overview",
    "href": "index.html#overview",
    "title": "",
    "section": "Overview",
    "text": "Overview\nThis report contains a pipeline for cleaning and validation of the SISVAN nutritional status dataset. The main goal is to provide a reliable workflow for processing and analyzing nutritional data from Brazil’s Food and Nutrition Surveillance System (SISVAN).\n\n\n\n\n\n\nThis pipeline is still under development and may not be fully functional.\nThis warning will be removed once the pipeline is complete."
  },
  {
    "objectID": "index.html#problem",
    "href": "index.html#problem",
    "title": "",
    "section": "Problem",
    "text": "Problem\nThe Food and Nutrition Surveillance System (SISVAN) is a strategic tool for monitoring the nutritional status of the Brazilian population, particularly those served by Brazil’s Unified Health System (SUS). However, despite its broad scope and importance, the anthropometric data recorded in SISVAN often suffer from quality issues that limit their usefulness for rigorous analyses and evidence-based policymaking (Silva et al., 2023).\nMultiple factors contribute to these quality concerns, including the lack of standardized measurement protocols, variability in staff training, inconsistencies in data entry and processing, and incomplete population coverage (Bagni & Barros, 2015; Corsi et al., 2017; Perumal et al., 2020). To assess and improve data quality, several indicators have been proposed and applied, such as population coverage (Mourão et al., 2020; Nascimento et al., 2017), completeness of birth dates and anthropometric measurements (Finaret & Hutchinson, 2018; Nannan et al., 2019), digit preference for age, height, and weight (Bopp & Faeh, 2008; Lyons-Amos & Stones, 2017), the percentage of biologically implausible values (Lawman et al., 2015), and the dispersion and distribution of standardized weight and height measurements (Mei, 2007; Perumal et al., 2020).\nIn light of this, there is a clear need for a systematic pipeline for cleaning and validating SISVAN data, aiming to identify, correct, or remove problematic records and ensure greater consistency, completeness, and plausibility of the information for use in research and public policy."
  },
  {
    "objectID": "index.html#methods",
    "href": "index.html#methods",
    "title": "",
    "section": "Methods",
    "text": "Methods\nSource of Data\nThe data used in this analysis come from the following sources:\n\nBrazil’s Food and Nutrition Surveillance System (SISVAN), which provides the nutritional status dataset used as the primary data source (Sistema de Vigilância Alimentar e Nutricional, n.d.).\nThe Brazilian Institute of Geography and Statistics (IBGE), which supplies population estimates by municipality, age, and sex (Instituto Brasileiro de Geografia e Estatística et al., 2025).\n\nFor detailed technical documentation on the SISVAN dataset, refer to the technical note (in Portuguese).\nData Munging\nThe data munging followed the data science workflow outlined by Wickham et al. (2023), as illustrated in Figure 1. All processes were made using the Quarto publishing system (Allaire et al., n.d.), the R programming language (R Core Team, n.d.) and several R packages.\nThe tidyverse and rOpenSci peer-reviewed package ecosystem and other R packages adherents of the tidy tools manifesto (Wickham, 2023) were prioritized. All processes were made in order to provide result transparency and reproducibility.\n\n\nFigure 1: Data science workflow created by Wickham, Çetinkaya-Runde, and Grolemund.\n\n\nSource: Reproduced from Wickham et al. (2023).\n\n\n\nData Validation\nDifferent validation methods were used to ensure the quality of the data:\n\nThe amount of data imported from the raw files were compared to the amount of data returned by SISVAN’s online data aggregator tool.\nDuplicates were removed based on distinct combinations of the variables id, age, date (date of the individual’s nutritional assessment), weight, and height.\nThe number of nutritional assessments were compared to the estimated number of children in the population.\n\nSilva et al. (2023) quality indicators were also used for validation. Refer to the article for more details.\nCode Style\nThe Tidyverse code style guide and design principles were followed to ensure consistency and enhance readability.\nReproducibility\nAll the analyses are fully reproducible and can be run again at any time. See the README file in the code repository to learn how to run them."
  },
  {
    "objectID": "index.html#setting-the-environment",
    "href": "index.html#setting-the-environment",
    "title": "",
    "section": "Setting the Environment",
    "text": "Setting the Environment\n\nlibrary(brandr) # github.com/danielvartan/brandr\nlibrary(cli)\nlibrary(dplyr)\nlibrary(fpeek)\nlibrary(fs)\nlibrary(foreign)\nlibrary(ggplot2)\nlibrary(here)\nlibrary(httr2)\nlibrary(lubridate)\nlibrary(orbis) # github.com/danielvartan/orbis\nlibrary(pal) # gitlab.com/rpkg.dev/pal\nlibrary(plotr) # github.com/danielvartan/plotr\nlibrary(readr)\nlibrary(rutils) # github.com/danielvartan/rutils\nlibrary(tidyr)\nlibrary(utils)\nlibrary(vroom)\n\n\nsource(here::here(\"R\", \"waz.R\"))"
  },
  {
    "objectID": "index.html#setting-the-initial-variables",
    "href": "index.html#setting-the-initial-variables",
    "title": "",
    "section": "Setting the Initial Variables",
    "text": "Setting the Initial Variables\n\n\n\n\n\n\nIf you need data for additional years, simply run this pipeline within a loop over the desired years.\n\n\n\n\nyear &lt;- 2017\n\n\nage_limits &lt;- c(0, 4)"
  },
  {
    "objectID": "index.html#downloading-the-data",
    "href": "index.html#downloading-the-data",
    "title": "",
    "section": "Downloading the Data",
    "text": "Downloading the Data\n\nCodeif (!dir.exists(here::here(\"data\"))) dir.create(\"data\")\n\n\n\nfile_pattern &lt;- paste0(\"sisvan-nutritional-status-\", year, \"-raw\")\n\n\nfile &lt;- here::here(\"data\", paste0(file_pattern, \".zip\"))\n\npaste0(\n    \"https://s3.sa-east-1.amazonaws.com/ckan.saude.gov.br/SISVAN/\",\n    \"estado_nutricional/sisvan_estado_nutricional_\",\n    year,\n    \".zip\"\n  ) |&gt;\n  httr2::request() |&gt;\n  httr2::req_progress() |&gt;\n  httr2::req_perform(file)"
  },
  {
    "objectID": "index.html#unzipping-the-data",
    "href": "index.html#unzipping-the-data",
    "title": "",
    "section": "Unzipping the Data",
    "text": "Unzipping the Data\n\nCodefile &lt;-\n  file |&gt;\n  utils::unzip(exdir = here::here(\"data\"), overwrite = TRUE)\n\n\n\nCodefile &lt;- fs::file_move(file, here::here(\"data\", paste0(file_pattern, \".csv\")))\n\n\n\nCodefs::file_delete(here::here(\"data\", paste0(file_pattern, \".zip\")))"
  },
  {
    "objectID": "index.html#checking-data-dimensions",
    "href": "index.html#checking-data-dimensions",
    "title": "",
    "section": "Checking Data Dimensions",
    "text": "Checking Data Dimensions\n\ncols &lt;-\n  file |&gt;\n  readr::read_delim(\n    delim = \";\",\n    col_names = FALSE,\n    n_max = 1,\n    progress = FALSE\n  ) |&gt;\n  rutils::shush() |&gt;\n  ncol()\n\nrows &lt;- fpeek::peek_count_lines(file)\ncells &lt;- cols * rows\n\ncli::cli_inform(paste0(\n  \"The file has \",\n  \"{.strong {cli::col_red(prettyNum(cols, big.mark = ','))}} columns, \",\n  \"{.strong {cli::col_green(prettyNum(rows, big.mark = ','))}} rows, and \",\n  \"{.strong {cli::col_blue(prettyNum(cells, big.mark = ','))}} cells.\"\n))\n#&gt; The file has 34 columns, 28,537,530 rows, and 970,276,020 cells."
  },
  {
    "objectID": "index.html#reading-and-filtering-the-data",
    "href": "index.html#reading-and-filtering-the-data",
    "title": "",
    "section": "Reading and Filtering the Data",
    "text": "Reading and Filtering the Data\n\n\n\n\n\n\nClick here to access the raw data dictionary (in Portuguese).\n\n\n\n\ncol_names &lt;- c(\n  \"CO_ACOMPANHAMENTO\",\n  \"CO_PESSOA_SISVAN\",\n  \"ST_PARTICIPA_ANDI\",\n  \"CO_MUNICIPIO_IBGE\",\n  \"SG_UF\",\n  \"NO_MUNICIPIO\",\n  \"CO_CNES\",\n  \"NU_IDADE_ANO\",\n  \"NU_FASE_VIDA\",\n  \"DS_FASE_VIDA\",\n  \"SG_SEXO\",\n  \"CO_RACA_COR\",\n  \"DS_RACA_COR\",\n  \"CO_POVO_COMUNIDADE\",\n  \"DS_POVO_COMUNIDADE\",\n  \"CO_ESCOLARIDADE\",\n  \"DS_ESCOLARIDADE\",\n  \"DT_ACOMPANHAMENTO\",\n  \"NU_COMPETENCIA\",\n  \"NU_PESO\",\n  \"NU_ALTURA\",\n  \"DS_IMC\",\n  \"DS_IMC_PRE_GESTACIONAL\",\n  \"PESO X IDADE\",\n  \"PESO X ALTURA\",\n  \"CRI. ALTURA X IDADE\",\n  \"CRI. IMC X IDADE\",\n  \"ADO. ALTURA X IDADE\",\n  \"ADO. IMC X IDADE\",\n  \"CO_ESTADO_NUTRI_ADULTO\",\n  \"CO_ESTADO_NUTRI_IDOSO\",\n  \"CO_ESTADO_NUTRI_IMC_SEMGEST\",\n  \"CO_SISTEMA_ORIGEM_ACOMP\",\n  \"SISTEMA_ORIGEM_ACOMP\"\n)\n\n\nschema &lt;- vroom::cols(\n  CO_ACOMPANHAMENTO = vroom::col_character(),\n  CO_PESSOA_SISVAN = vroom::col_character(),\n  ST_PARTICIPA_ANDI = vroom::col_character(),\n  CO_MUNICIPIO_IBGE = vroom::col_integer(),\n  SG_UF = vroom::col_factor(),\n  NO_MUNICIPIO = vroom::col_character(), # ? vroom::col_factor()\n  CO_CNES = vroom::col_integer(),\n  NU_IDADE_ANO = vroom::col_integer(),\n  NU_FASE_VIDA = vroom::col_character(), # decimal mark = \".\" (double)\n  DS_FASE_VIDA = vroom::col_factor(),\n  SG_SEXO = vroom::col_factor(),\n  CO_RACA_COR = vroom::col_character(),\n  DS_RACA_COR = vroom::col_factor(),\n  CO_POVO_COMUNIDADE = vroom::col_integer(),\n  DS_POVO_COMUNIDADE = vroom::col_factor(),\n  CO_ESCOLARIDADE = vroom::col_character(),\n  DS_ESCOLARIDADE = vroom::col_factor(),\n  DT_ACOMPANHAMENTO = vroom::col_date(),\n  NU_COMPETENCIA = vroom::col_integer(),\n  NU_PESO = vroom::col_double(),\n  NU_ALTURA = vroom::col_integer(),\n  DS_IMC = vroom::col_double(),\n  DS_IMC_PRE_GESTACIONAL = vroom::col_character(), # decimal mark = \".\" (double)\n  \"PESO X IDADE\" = vroom::col_factor(),\n  \"PESO X ALTURA\" = vroom::col_factor(),\n  \"CRI. ALTURA X IDADE\" = vroom::col_factor(),\n  \"CRI. IMC X IDADE\" = vroom::col_factor(),\n  \"ADO. ALTURA X IDADE\" = vroom::col_factor(),\n  \"ADO. IMC X IDADE\" = vroom::col_factor(),\n  CO_ESTADO_NUTRI_ADULTO = vroom::col_factor(),\n  CO_ESTADO_NUTRI_IDOSO = vroom::col_factor(),\n  CO_ESTADO_NUTRI_IMC_SEMGEST = vroom::col_factor(),\n  CO_SISTEMA_ORIGEM_ACOMP = vroom::col_integer(),\n  SISTEMA_ORIGEM_ACOMP = vroom::col_factor()\n)\n\n\n\n\n\n\n\nYou may see warning messages about failed parsing of some columns. These warnings are expected due to minor inconsistencies in the SISVAN raw data and do not affect the overall analysis.\n\n\n\n\ndata &lt;-\n  vroom::vroom(\n     # Uses `pipe()` and `awk` to filter data to avoid loading the\n     # entire file into memory.\n    file = pipe(\n      paste(\n        \"awk -F ';' '{ if (\",\n        \"($8 &gt;= \", age_limits[1], \") && ($8 &lt;= \", age_limits[2], \")\",\n        \") { print } }'\",\n        file\n      )\n    ),\n    delim = \";\",\n    col_names = col_names,\n    col_types = schema,\n    col_select =  c(\n      \"CO_PESSOA_SISVAN\",\n      \"CO_MUNICIPIO_IBGE\",\n      \"DT_ACOMPANHAMENTO\",\n      \"SG_SEXO\",\n      \"NU_IDADE_ANO\",\n      \"NU_PESO\",\n      \"NU_ALTURA\"\n    ),\n    id = NULL,\n    skip = 0,\n    n_max = Inf,\n    na = c(\"\", \"NA\"),\n    quote = \"\\\"\",\n    comment = \"\",\n    skip_empty_rows = TRUE,\n    trim_ws = TRUE,\n    escape_double = TRUE,\n    escape_backslash = FALSE,\n    locale = vroom::locale(\n      date_names = \"pt\",\n      date_format = \"%d/%m/%Y\",\n      time_format = \"%H:%M:%S\",\n      decimal_mark = \",\",\n      grouping_mark = \".\",\n      tz = \"America/Sao_Paulo\",\n      encoding = readr::guess_encoding(file)$encoding[1]\n    ),\n    guess_max = 100,\n    altrep = TRUE,\n    num_threads = vroom:::vroom_threads(),\n    progress = vroom::vroom_progress(),\n    show_col_types = NULL,\n    .name_repair = \"unique\"\n  )\n\n\ndata |&gt; dplyr::glimpse()\n#&gt; Rows: 4,775,907\n#&gt; Columns: 7\n#&gt; $ CO_PESSOA_SISVAN  &lt;chr&gt; \"B053B4FAD12CF2F95F1C251702606DCCD870A406\", \"CF43…\n#&gt; $ CO_MUNICIPIO_IBGE &lt;int&gt; 230670, 420270, 520520, 251445, 231380, 230710, 2…\n#&gt; $ DT_ACOMPANHAMENTO &lt;date&gt; 2017-01-23, 2017-01-11, 2017-01-02, 2017-01-10, …\n#&gt; $ SG_SEXO           &lt;fct&gt; M, M, F, F, F, F, F, F, M, M, F, F, M, F, F, F, F…\n#&gt; $ NU_IDADE_ANO      &lt;int&gt; 1, 3, 3, 0, 4, 0, 0, 1, 1, 0, 0, 4, 1, 1, 0, 0, 0…\n#&gt; $ NU_PESO           &lt;dbl&gt; 11.600, 17.200, 14.000, 12.200, 16.000, 6.400, 8.…\n#&gt; $ NU_ALTURA         &lt;int&gt; 77, 90, 97, 73, 100, 60, 63, 73, 88, 66, 67, 108,…"
  },
  {
    "objectID": "index.html#renaming-the-data-variables",
    "href": "index.html#renaming-the-data-variables",
    "title": "",
    "section": "Renaming the Data Variables",
    "text": "Renaming the Data Variables\n\ndata &lt;-\n  data |&gt;\n  janitor::clean_names() |&gt;\n  dplyr::rename(\n    id = co_pessoa_sisvan,\n    municipality_code = co_municipio_ibge,\n    date = dt_acompanhamento,\n    sex = sg_sexo,\n    age = nu_idade_ano,\n    weight = nu_peso,\n    height = nu_altura\n  )\n\n\ndata |&gt; dplyr::glimpse()\n#&gt; Rows: 4,775,907\n#&gt; Columns: 7\n#&gt; $ id                &lt;chr&gt; \"B053B4FAD12CF2F95F1C251702606DCCD870A406\", \"CF43…\n#&gt; $ municipality_code &lt;int&gt; 230670, 420270, 520520, 251445, 231380, 230710, 2…\n#&gt; $ date              &lt;date&gt; 2017-01-23, 2017-01-11, 2017-01-02, 2017-01-10, …\n#&gt; $ sex               &lt;fct&gt; M, M, F, F, F, F, F, F, M, M, F, F, M, F, F, F, F…\n#&gt; $ age               &lt;int&gt; 1, 3, 3, 0, 4, 0, 0, 1, 1, 0, 0, 4, 1, 1, 0, 0, 0…\n#&gt; $ weight            &lt;dbl&gt; 11.600, 17.200, 14.000, 12.200, 16.000, 6.400, 8.…\n#&gt; $ height            &lt;int&gt; 77, 90, 97, 73, 100, 60, 63, 73, 88, 66, 67, 108,…"
  },
  {
    "objectID": "index.html#tidying-the-data",
    "href": "index.html#tidying-the-data",
    "title": "",
    "section": "Tidying the Data",
    "text": "Tidying the Data\n\ndata &lt;-\n  data |&gt;\n  dplyr::mutate(\n    sex =\n      sex |&gt;\n      dplyr::case_match(\n        \"F\" ~ \"female\",\n        \"M\" ~ \"male\"\n      ) |&gt;\n      factor(\n        levels = c(\"male\", \"female\"),\n        ordered = FALSE\n      )\n  )\n\n\ndata |&gt; dplyr::glimpse()\n#&gt; Rows: 4,775,907\n#&gt; Columns: 7\n#&gt; $ id                &lt;chr&gt; \"B053B4FAD12CF2F95F1C251702606DCCD870A406\", \"CF43…\n#&gt; $ municipality_code &lt;int&gt; 230670, 420270, 520520, 251445, 231380, 230710, 2…\n#&gt; $ date              &lt;date&gt; 2017-01-23, 2017-01-11, 2017-01-02, 2017-01-10, …\n#&gt; $ sex               &lt;fct&gt; male, male, female, female, female, female, femal…\n#&gt; $ age               &lt;int&gt; 1, 3, 3, 0, 4, 0, 0, 1, 1, 0, 0, 4, 1, 1, 0, 0, 0…\n#&gt; $ weight            &lt;dbl&gt; 11.600, 17.200, 14.000, 12.200, 16.000, 6.400, 8.…\n#&gt; $ height            &lt;int&gt; 77, 90, 97, 73, 100, 60, 63, 73, 88, 66, 67, 108,…"
  },
  {
    "objectID": "index.html#transforming-the-data",
    "href": "index.html#transforming-the-data",
    "title": "",
    "section": "Transforming the Data",
    "text": "Transforming the Data"
  },
  {
    "objectID": "index.html#removing-duplicates",
    "href": "index.html#removing-duplicates",
    "title": "",
    "section": "Removing Duplicates",
    "text": "Removing Duplicates\n\ndata &lt;-\n  data |&gt;\n  dplyr::arrange(dplyr::desc(date)) |&gt;\n  dplyr::distinct(\n    id,\n    age,\n    date,\n    weight,\n    height,\n    .keep_all = TRUE\n  )\n#&gt; Warning: One or more parsing issues, call `problems()` on your data frame for\n#&gt; details, e.g.:\n#&gt;   dat &lt;- vroom(...)\n#&gt;   problems(dat)\n\n\ndata |&gt; dplyr::glimpse()\n#&gt; Rows: 4,770,414\n#&gt; Columns: 7\n#&gt; $ id                &lt;chr&gt; \"B1C98CBB3CB83C75B08E2F62056EB10A68DBEBA4\", \"5B1A…\n#&gt; $ municipality_code &lt;int&gt; 522020, 522045, 522020, 521250, 522020, 522020, 5…\n#&gt; $ date              &lt;date&gt; 2017-12-31, 2017-12-31, 2017-12-31, 2017-12-31, …\n#&gt; $ sex               &lt;fct&gt; female, male, female, male, female, male, female,…\n#&gt; $ age               &lt;int&gt; 3, 4, 2, 2, 2, 3, 3, 1, 2, 4, 2, 3, 2, 4, 3, 4, 4…\n#&gt; $ weight            &lt;dbl&gt; 17, NA, NA, NA, 14, 19, 16, 12, 14, 21, NA, 17, 1…\n#&gt; $ height            &lt;int&gt; 94, 107, 85, 81, 89, 96, 95, 80, 87, 127, 93, 93,…"
  },
  {
    "objectID": "index.html#arranging-the-data",
    "href": "index.html#arranging-the-data",
    "title": "",
    "section": "Arranging the Data",
    "text": "Arranging the Data\n\ndata &lt;-\n  data |&gt;\n  dplyr::arrange(\n    municipality_code,\n    date,\n    sex,\n    age,\n    weight,\n    height\n  )\n\n\ndata |&gt; dplyr::glimpse()\n#&gt; Rows: 4,770,414\n#&gt; Columns: 7\n#&gt; $ id                &lt;chr&gt; \"263E905B0395FF94BE2D97E92983F83D0F4D01E6\", \"B812…\n#&gt; $ municipality_code &lt;int&gt; 110001, 110001, 110001, 110001, 110001, 110001, 1…\n#&gt; $ date              &lt;date&gt; 2017-01-04, 2017-01-05, 2017-01-06, 2017-01-09, …\n#&gt; $ sex               &lt;fct&gt; female, male, female, male, male, female, male, m…\n#&gt; $ age               &lt;int&gt; 1, 1, 4, 2, 0, 3, 1, 2, 1, 4, 0, 2, 0, 0, 4, 0, 0…\n#&gt; $ weight            &lt;dbl&gt; 9.000, 9.700, 14.000, 12.700, 6.600, 13.800, 10.0…\n#&gt; $ height            &lt;int&gt; 81, 75, 95, 89, 58, 98, 83, 80, 76, 111, 53, 95, …\n\n\nCodedata"
  },
  {
    "objectID": "index.html#data-dictionary",
    "href": "index.html#data-dictionary",
    "title": "",
    "section": "Data Dictionary",
    "text": "Data Dictionary\n\n\nid: Unique identifier for the individual.\n\nmunicipality_code: IBGE code of the municipality.\n\ndate: Date of the individual’s nutritional assessment.\n\nsex: Sex of the individual.\n\nage: Age of the individual in years.\n\nweight: Weight of the individual in kilograms.\n\nheight: Height of the individual in centimeters."
  },
  {
    "objectID": "index.html#aggregating-the-data",
    "href": "index.html#aggregating-the-data",
    "title": "",
    "section": "Aggregating the Data",
    "text": "Aggregating the Data\n\n\ndata_agg &lt;-\n  data |&gt;\n  dplyr::mutate(\n    year = lubridate::year(date),\n    month = lubridate::month(date),\n    age_months = age * 12\n  ) |&gt;\n  dplyr::summarize(\n    coverage = dplyr::n(),\n    mean_age_months = age_months |&gt; mean(na.rm = TRUE),\n    mean_weight = weight |&gt; mean(na.rm = TRUE),\n    mean_height = height |&gt; mean(na.rm = TRUE),\n    .by = dplyr::all_of(c(\"municipality_code\", \"year\", \"month\"))\n  )\n\n\ndata_agg |&gt; dplyr::glimpse()\n#&gt; Rows: 59,548\n#&gt; Columns: 7\n#&gt; $ municipality_code &lt;int&gt; 110001, 110001, 110001, 110001, 110001, 110001, 1…\n#&gt; $ year              &lt;dbl&gt; 2017, 2017, 2017, 2017, 2017, 2017, 2017, 2017, 2…\n#&gt; $ month             &lt;dbl&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4…\n#&gt; $ coverage          &lt;int&gt; 21, 26, 73, 32, 28, 22, 12, 31, 130, 236, 77, 68,…\n#&gt; $ mean_age_months   &lt;dbl&gt; 18.85714286, 29.07692308, 26.30136986, 27.3750000…\n#&gt; $ mean_weight       &lt;dbl&gt; 10.77138095, 15.23333333, 13.35937500, 13.9769642…\n#&gt; $ mean_height       &lt;dbl&gt; 80.52380952, 96.11538462, 90.61643836, 91.1875000…\n\n\nCodedata_agg"
  },
  {
    "objectID": "index.html#saving-the-valid-data",
    "href": "index.html#saving-the-valid-data",
    "title": "",
    "section": "Saving the Valid Data",
    "text": "Saving the Valid Data\n\nCodedata |&gt;\n  readr::write_csv(\n    here::here(\n      \"data\",\n      paste0(\"sisvan-nutritional-status-\", year, \"-valid.csv\")\n    )\n  )\n\n\n\nCodedata |&gt;\n  readr::write_rds(\n    here::here(\n      \"data\",\n      paste0(\"sisvan-nutritional-status-\", year, \"-valid.rds\")\n    )\n  )"
  },
  {
    "objectID": "index.html#visualizing-the-data",
    "href": "index.html#visualizing-the-data",
    "title": "",
    "section": "Visualizing the Data",
    "text": "Visualizing the Data\nDownloading the Estimates of the Population Data\n\ndatasus_file_pattern &lt;- paste0(\"datasus-resident-pop-\", year, \"-raw\")\n\n\ndatasus_file &lt;- here::here(\"data\", paste0(datasus_file_pattern, \".zip\"))\n\nreq &lt;-\n  paste0(\n    \"ftp.datasus.gov.br/dissemin/publicos/IBGE/POPSVS/POPSBR\",\n    year |&gt; stringr::str_sub(start= -2),\n    \".zip\"\n  ) |&gt;\n  httr2::request() |&gt;\n  httr2::req_progress() |&gt;\n  httr2::req_perform(datasus_file)\n\nUnzipping the Population Data\n\nCodedatasus_file &lt;-\n  datasus_file |&gt;\n  utils::unzip(exdir = here::here(\"data\"), overwrite = TRUE)\n\n\n\nCodedatasus_file &lt;- fs::file_move(\n  datasus_file,\n  here::here(\"data\", paste0(datasus_file_pattern, \".csv\"))\n)\n\n\n\nCodefs::file_delete(\n  here::here(\"data\", paste0(datasus_file_pattern, \".zip\"))\n)\n\n\nReading the Population Data\n\ndatasus_data &lt;-\n  datasus_file |&gt;\n  foreign::read.dbf() |&gt;\n  dplyr::as_tibble()\n\n\ndatasus_data |&gt; dplyr::glimpse()\n#&gt; Rows: 902,340\n#&gt; Columns: 5\n#&gt; $ COD_MUN &lt;fct&gt; 1100015, 1100015, 1100015, 1100015, 1100015, 1100015, 11000…\n#&gt; $ ANO     &lt;fct&gt; 2017, 2017, 2017, 2017, 2017, 2017, 2017, 2017, 2017, 2017,…\n#&gt; $ SEXO    &lt;fct&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n#&gt; $ IDADE   &lt;fct&gt; 000, 001, 002, 003, 004, 005, 006, 007, 008, 009, 010, 011,…\n#&gt; $ POP     &lt;int&gt; 185, 186, 189, 187, 184, 190, 191, 190, 191, 190, 197, 207,…\n\nRenaming the Population Data\n\ndatasus_data &lt;-\n  datasus_data |&gt;\n  janitor::clean_names() |&gt;\n  dplyr::rename(\n    municipality_code = cod_mun,\n    year = ano,\n    sex = sexo,\n    age = idade,\n    n = pop\n  )\n\n\ndatasus_data |&gt; dplyr::glimpse()\n#&gt; Rows: 902,340\n#&gt; Columns: 5\n#&gt; $ municipality_code &lt;fct&gt; 1100015, 1100015, 1100015, 1100015, 1100015, 1100…\n#&gt; $ year              &lt;fct&gt; 2017, 2017, 2017, 2017, 2017, 2017, 2017, 2017, 2…\n#&gt; $ sex               &lt;fct&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n#&gt; $ age               &lt;fct&gt; 000, 001, 002, 003, 004, 005, 006, 007, 008, 009,…\n#&gt; $ n                 &lt;int&gt; 185, 186, 189, 187, 184, 190, 191, 190, 191, 190,…\n\nTidying the Population Data\n\ndatasus_data &lt;-\n  datasus_data |&gt;\n  dplyr::mutate(\n    dplyr::across(\n      .cols = where(is.factor),\n      .fns = ~ .x |&gt; as.character() |&gt; as.integer()\n    )\n  ) |&gt;\n  dplyr::mutate(\n    sex = factor(\n      sex,\n      levels = 1:2,\n      labels = c(\"male\", \"female\"),\n      ordered = FALSE\n    )\n  )\n\n\ndatasus_data |&gt; dplyr::glimpse()\n#&gt; Rows: 902,340\n#&gt; Columns: 5\n#&gt; $ municipality_code &lt;int&gt; 1100015, 1100015, 1100015, 1100015, 1100015, 1100…\n#&gt; $ year              &lt;int&gt; 2017, 2017, 2017, 2017, 2017, 2017, 2017, 2017, 2…\n#&gt; $ sex               &lt;fct&gt; male, male, male, male, male, male, male, male, m…\n#&gt; $ age               &lt;int&gt; 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,…\n#&gt; $ n                 &lt;int&gt; 185, 186, 189, 187, 184, 190, 191, 190, 191, 190,…\n\nArranging the Population Data\n\ndatasus_data &lt;-\n  datasus_data |&gt;\n  dplyr::arrange(\n    municipality_code,\n    year,\n    sex,\n    age\n  )\n\n\ndatasus_data |&gt; dplyr::glimpse()\n#&gt; Rows: 902,340\n#&gt; Columns: 5\n#&gt; $ municipality_code &lt;int&gt; 1100015, 1100015, 1100015, 1100015, 1100015, 1100…\n#&gt; $ year              &lt;int&gt; 2017, 2017, 2017, 2017, 2017, 2017, 2017, 2017, 2…\n#&gt; $ sex               &lt;fct&gt; male, male, male, male, male, male, male, male, m…\n#&gt; $ age               &lt;int&gt; 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,…\n#&gt; $ n                 &lt;int&gt; 185, 186, 189, 187, 184, 190, 191, 190, 191, 190,…\n\nMerging the Population Data with the Validated Data\n\nplot_data &lt;-\n  datasus_data |&gt;\n  dplyr::filter(dplyr::between(age, 0, 4)) |&gt;\n  dplyr::mutate(\n    municipality_code =\n      municipality_code |&gt;\n      stringr::str_sub(end = -2) |&gt;\n      as.integer()\n  ) |&gt;\n  dplyr::select(municipality_code, year, n) |&gt;\n  dplyr::summarize(\n    n = n |&gt; sum(na.rm = TRUE),\n    .by = c(\"municipality_code\", \"year\")\n  ) |&gt;\n  dplyr::right_join(\n    data |&gt;\n      dplyr::mutate(year = lubridate::year(date)) |&gt;\n      dplyr::arrange(dplyr::desc(date)) |&gt;\n      dplyr::distinct(id, year, .keep_all = TRUE) |&gt;\n      dplyr::summarize(\n        coverage = dplyr::n(),\n        mean_age = age |&gt; mean(na.rm = TRUE),\n        mean_weight = weight |&gt; mean(na.rm = TRUE),\n        mean_height = height |&gt; mean(na.rm = TRUE),\n        .by = c(\"municipality_code\", \"year\")\n      ),\n    by = c(\"municipality_code\", \"year\")\n  ) |&gt;\n  dplyr::rename(children = n)\n\n\nplot_data |&gt; dplyr::glimpse()\n#&gt; Rows: 5,570\n#&gt; Columns: 7\n#&gt; $ municipality_code &lt;int&gt; 110001, 110002, 110003, 110004, 110005, 110006, 1…\n#&gt; $ year              &lt;dbl&gt; 2017, 2017, 2017, 2017, 2017, 2017, 2017, 2017, 2…\n#&gt; $ children          &lt;int&gt; 1808, 8154, 426, 6551, 1258, 1242, 604, 1353, 250…\n#&gt; $ coverage          &lt;int&gt; 734, 1577, 94, 1334, 622, 374, 223, 584, 702, 107…\n#&gt; $ mean_age          &lt;dbl&gt; 2.179836512, 2.581483830, 2.053191489, 2.11544227…\n#&gt; $ mean_weight       &lt;dbl&gt; 13.63854669, 15.17615741, 14.22727273, 13.3930077…\n#&gt; $ mean_height       &lt;dbl&gt; 90.91256831, 93.11921370, 91.26595745, 89.4924698…\n\nTransforming the Merged Data\n\nplot_data &lt;-\n  plot_data |&gt;\n  dplyr::mutate(coverage_per = (coverage / children) * 100) |&gt;\n  dplyr::rename(coverage = coverage) |&gt;\n  dplyr::relocate(coverage_per, .after = coverage)\n\n\nplot_data |&gt; dplyr::glimpse()\n#&gt; Rows: 5,570\n#&gt; Columns: 8\n#&gt; $ municipality_code &lt;int&gt; 110001, 110002, 110003, 110004, 110005, 110006, 1…\n#&gt; $ year              &lt;dbl&gt; 2017, 2017, 2017, 2017, 2017, 2017, 2017, 2017, 2…\n#&gt; $ children          &lt;int&gt; 1808, 8154, 426, 6551, 1258, 1242, 604, 1353, 250…\n#&gt; $ coverage          &lt;int&gt; 734, 1577, 94, 1334, 622, 374, 223, 584, 702, 107…\n#&gt; $ coverage_per      &lt;dbl&gt; 40.597345133, 19.340201128, 22.065727700, 20.3633…\n#&gt; $ mean_age          &lt;dbl&gt; 2.179836512, 2.581483830, 2.053191489, 2.11544227…\n#&gt; $ mean_weight       &lt;dbl&gt; 13.63854669, 15.17615741, 14.22727273, 13.3930077…\n#&gt; $ mean_height       &lt;dbl&gt; 90.91256831, 93.11921370, 91.26595745, 89.4924698…\n\nValidating the Merged Data\n\n\n\n\n\n\nThe number of children in each municipality is estimated. Therefore, if the SISVAN coverage exceeds the projected number of children, the number of children is set equal to the coverage.\n\n\n\n\nplot_data &lt;-\n  plot_data |&gt;\n  dplyr::mutate(\n    children = dplyr::case_when(\n      coverage &gt; children ~ coverage,\n      TRUE ~ children\n    ),\n    coverage_per = (coverage / children) * 100\n  )\n\n\nplot_data |&gt; dplyr::glimpse()\n#&gt; Rows: 5,570\n#&gt; Columns: 8\n#&gt; $ municipality_code &lt;int&gt; 110001, 110002, 110003, 110004, 110005, 110006, 1…\n#&gt; $ year              &lt;dbl&gt; 2017, 2017, 2017, 2017, 2017, 2017, 2017, 2017, 2…\n#&gt; $ children          &lt;int&gt; 1808, 8154, 426, 6551, 1258, 1242, 604, 1353, 250…\n#&gt; $ coverage          &lt;int&gt; 734, 1577, 94, 1334, 622, 374, 223, 584, 702, 107…\n#&gt; $ coverage_per      &lt;dbl&gt; 40.597345133, 19.340201128, 22.065727700, 20.3633…\n#&gt; $ mean_age          &lt;dbl&gt; 2.179836512, 2.581483830, 2.053191489, 2.11544227…\n#&gt; $ mean_weight       &lt;dbl&gt; 13.63854669, 15.17615741, 14.22727273, 13.3930077…\n#&gt; $ mean_height       &lt;dbl&gt; 90.91256831, 93.11921370, 91.26595745, 89.4924698…\n\nAdding State and Region Data\n\nbrazil_municipalities &lt;- orbis::get_brazil_municipality(\n  year = plotr:::get_closest_geobr_year(year, type = \"municipality\")\n)\n\n\nplot_data &lt;-\n  plot_data |&gt;\n  dplyr::left_join(\n    brazil_municipalities |&gt;\n      dplyr::mutate(\n      municipality_code =\n        municipality_code |&gt;\n        stringr::str_sub(end = -2) |&gt;\n        as.integer()\n    ) |&gt;\n      dplyr::select(\n        municipality,\n        municipality_code,\n        state_code,\n        state,\n        federal_unit,\n      ),\n    by = \"municipality_code\"\n  ) |&gt;\n  dplyr::mutate(region = orbis::get_brazil_region(federal_unit)) |&gt;\n  dplyr::relocate(municipality, .after = municipality_code) |&gt;\n  dplyr::relocate(\n    region,\n    state_code,\n    federal_unit,\n    state,\n    .before = municipality_code\n  )\n\n\nplot_data |&gt; dplyr::glimpse()\n#&gt; Rows: 5,570\n#&gt; Columns: 13\n#&gt; $ region            &lt;chr&gt; \"North\", \"North\", \"North\", \"North\", \"North\", \"Nor…\n#&gt; $ state_code        &lt;int&gt; 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 1…\n#&gt; $ federal_unit      &lt;chr&gt; \"RO\", \"RO\", \"RO\", \"RO\", \"RO\", \"RO\", \"RO\", \"RO\", \"…\n#&gt; $ state             &lt;chr&gt; \"Rondônia\", \"Rondônia\", \"Rondônia\", \"Rondônia\", \"…\n#&gt; $ municipality_code &lt;int&gt; 110001, 110002, 110003, 110004, 110005, 110006, 1…\n#&gt; $ municipality      &lt;chr&gt; \"Alta Floresta D'Oeste\", \"Ariquemes\", \"Cabixi\", \"…\n#&gt; $ year              &lt;dbl&gt; 2017, 2017, 2017, 2017, 2017, 2017, 2017, 2017, 2…\n#&gt; $ children          &lt;int&gt; 1808, 8154, 426, 6551, 1258, 1242, 604, 1353, 250…\n#&gt; $ coverage          &lt;int&gt; 734, 1577, 94, 1334, 622, 374, 223, 584, 702, 107…\n#&gt; $ coverage_per      &lt;dbl&gt; 40.597345133, 19.340201128, 22.065727700, 20.3633…\n#&gt; $ mean_age          &lt;dbl&gt; 2.179836512, 2.581483830, 2.053191489, 2.11544227…\n#&gt; $ mean_weight       &lt;dbl&gt; 13.63854669, 15.17615741, 14.22727273, 13.3930077…\n#&gt; $ mean_height       &lt;dbl&gt; 90.91256831, 93.11921370, 91.26595745, 89.4924698…\n\nChecking Relative Coverage\nThe coverage observed here is slightly lower than that reported in Silva et al. (2023, Table 2). This difference may be explained by the use of different data sources (Fundação Oswaldo Cruz (Fiocruz) vs. OpenDataSUS).\nCodeplot_data |&gt;\n  dplyr::summarize(\n    children = children |&gt; sum(na.rm = TRUE),\n    coverage = coverage |&gt; sum(na.rm = TRUE),\n    .by = \"region\"\n  ) |&gt;\n  dplyr::slice(c(1, 2, 5, 3, 4)) |&gt;\n  dplyr::mutate(\n    coverage_per = (coverage / children) * 100\n  ) |&gt;\n  dplyr::rename(\n    Region = region,\n    Children = children,\n    `SISVAN coverage` = coverage,\n    `SISVAN coverage (%)` = coverage_per\n  ) |&gt;\n  pal::pipe_table() |&gt;\n  pal::cat_lines()\n\n\n\n\n\n\n\n\nRegion\nChildren\nSISVAN coverage\nSISVAN coverage (%)\n\n\n\nNorth\n1592792\n624150\n39.18590751\n\n\nNortheast\n4107294\n1813679\n44.15751587\n\n\nCentral-West\n1208858\n268745\n22.23131253\n\n\nSoutheast\n5767592\n1336352\n23.17001619\n\n\nSouth\n1975068\n579801\n29.35600192\n\n\n\nCodeplot_data |&gt;\n  dplyr::summarize(\n    children = children |&gt; sum(na.rm = TRUE),\n    coverage = coverage |&gt; sum(na.rm = TRUE),\n    .by = \"state\"\n  ) |&gt;\n  dplyr::arrange(state) |&gt;\n  dplyr::mutate(\n    coverage_per = (coverage / children) * 100\n  ) |&gt;\n  dplyr::rename(\n    State = state,\n    Children = children,\n    `SISVAN coverage` = coverage,\n    `SISVAN coverage (%)` = coverage_per\n  ) |&gt;\n  pal::pipe_table() |&gt;\n  pal::cat_lines()\n\n\n\n\n\n\n\n\nState\nChildren\nSISVAN coverage\nSISVAN coverage (%)\n\n\n\nAcre\n81517\n36178\n44.380926678\n\n\nAlagoas\n253571\n113343\n44.698723435\n\n\nAmapá\n79072\n20820\n26.330433023\n\n\nAmazonas\n403287\n165140\n40.948505655\n\n\nBahia\n1012762\n444864\n43.925818702\n\n\nCeará\n645357\n281507\n43.620352766\n\n\nDistrito Federal\n218010\n18757\n8.603733774\n\n\nEspírito Santo\n277541\n61507\n22.161410386\n\n\nGoiás\n491920\n103909\n21.123150106\n\n\nMaranhão\n578369\n283802\n49.069365751\n\n\nMato Grosso\n280532\n79026\n28.170048337\n\n\nMato Grosso do Sul\n218396\n67053\n30.702485394\n\n\nMinas Gerais\n1309142\n620924\n47.429843363\n\n\nParaná\n786664\n253352\n32.205871884\n\n\nParaíba\n285820\n150132\n52.526765097\n\n\nPará\n710233\n290899\n40.958248913\n\n\nPernambuco\n692218\n259659\n37.511159779\n\n\nPiauí\n234935\n125698\n53.503309426\n\n\nRio Grande do Norte\n237059\n84896\n35.812181778\n\n\nRio Grande do Sul\n707754\n177919\n25.138536836\n\n\nRio de Janeiro\n1122656\n181772\n16.191246473\n\n\nRondônia\n135254\n33899\n25.063214397\n\n\nRoraima\n59647\n16842\n28.236122521\n\n\nSanta Catarina\n480650\n148530\n30.901903672\n\n\nSergipe\n167203\n69778\n41.732504800\n\n\nSão Paulo\n3058253\n472149\n15.438519965\n\n\nTocantins\n123782\n60372\n48.772842578\n\n\nPlotting SISVAN Coverage (%) by Municipality\n\nCodebrand_div_palette &lt;- function(x) {\n  brandr:::make_color_ramp(\n    n_prop = x,\n    colors = c(\n      brandr::get_brand_color(\"dark-red\"),\n      # brandr::get_brand_color(\"white\"),\n      brandr::get_brand_color_mix(\n        position = 950,\n        color_1 = \"dark-red\",\n        color_2 = \"dark-red-triadic-blue\",\n        alpha = 0.5\n      ),\n      brandr::get_brand_color(\"dark-red-triadic-blue\")\n    )\n  )\n}\n\n\n\nCodeplot_data |&gt;\n  tidyr::drop_na(coverage_per) |&gt;\n  plotr:::plot_hist(\n    col = \"coverage_per\",\n    density_line_color = \"red\",\n    x_label = \"SISVAN coverage (%)\"\n  )\n\n\n\n\n\n\n\n\nCodeplot_data |&gt;\n  tidyr::drop_na(coverage_per, municipality_code) |&gt;\n  plotr:::plot_brazil_municipality(\n    col_fill = \"coverage_per\",\n    col_code = \"municipality_code\",\n    year = plotr:::get_closest_geobr_year(year, type = \"municipality\"),\n    comparable_areas = FALSE,\n    breaks = seq(0, 100, 25),\n    reverse = FALSE,\n    limits = c(0, 100),\n    palette = brand_div_palette\n  )"
  },
  {
    "objectID": "index.html#license",
    "href": "index.html#license",
    "title": "",
    "section": "License",
    "text": "License\n \nThe code in this repository is licensed under the MIT License, while the documents are available under the Creative Commons Attribution 4.0 International License."
  },
  {
    "objectID": "index.html#how-to-cite",
    "href": "index.html#how-to-cite",
    "title": "",
    "section": "How to Cite",
    "text": "How to Cite\nTo cite this work, please use the following format:\nVartanian, D.; & Schettino, J. P. J. (2025). A pipeline for cleaning and validating the SISVAN nutritional status dataset [Report]. Sustentarea Research and Extension Group at the University of São Paulo. https://sustentarea.github.io/sisvan-nutritional-status/\nA BibTeX entry for LaTeX users is\n@techreport{vartanian2025,\n  title = {A pipeline for cleaning and validating the SISVAN nutritional status dataset},\n  author = {{Daniel Vartanian} and {João Pedro Junqueira Schettino}},\n  year = {2025},\n  address = {São Paulo},\n  institution = {Sustentarea Research and Extension Group at the University of São Paulo},\n  langid = {en},\n  url = {https://sustentarea.github.io/sisvan-nutritional-status/}\n}"
  },
  {
    "objectID": "index.html#references",
    "href": "index.html#references",
    "title": "",
    "section": "References",
    "text": "References\n\n\nAllaire, J. J., Teague, C., Xie, Y., & Dervieux, C. (n.d.). Quarto [Computer software]. Zenodo. https://doi.org/10.5281/ZENODO.5960048\n\n\nBagni, U. V., & Barros, D. C. D. (2015). Erro em antropometria aplicada à avaliação nutricional nos serviços de saúde: Causas, consequências e métodos de mensuração. Nutrire, 40(2), 226–236. https://doi.org/10.4322/2316-7874.18613\n\n\nBopp, M., & Faeh, D. (2008). End-digits preference for self-reported height depends on language. BMC Public Health, 8(1), 342. https://doi.org/10.1186/1471-2458-8-342\n\n\nCorsi, D. J., Perkins, J. M., & Subramanian, S. V. (2017). Child anthropometry data quality from Demographic and Health Surveys, Multiple Indicator Cluster Surveys, and National Nutrition Surveys in the West Central Africa region: Are we comparing apples and oranges? Global Health Action, 10(1), 1328185. https://doi.org/10.1080/16549716.2017.1328185\n\n\nFinaret, A. B., & Hutchinson, M. (2018). Missingness of height data from the demographic and health surveys in Africa between 1991 and 2016 was not random but is unlikely to have major implications for biases in estimating stunting prevalence or the determinants of child height. The Journal of Nutrition, 148(5), 781–789. https://doi.org/10.1093/jn/nxy037\n\n\nInstituto Brasileiro de Geografia e Estatística, Comitê de Gestão de Indicadores, Rede Interagencial de Informações para a Saúde, Coordenação-Geral de Informações e Análises Epidemiológicas, Secretaria de Vigilância em Saúde e Ambiente, & Ministério da Saúde. (2025). População residente – Estudo de estimativas populacionais por município, idade e sexo 2000-2024 – Brasil [Resident population – Study of population estimates by municipality, age, and sex, 2000–2024 – Brazil] [Data set]. DATASUS - Tabnet. http://tabnet.datasus.gov.br/cgi/deftohtm.exe?ibge/cnv/popsvs2024br.def\n\n\nLawman, H. G., Ogden, C. L., Hassink, S., Mallya, G., Vander Veur, S., & Foster, G. D. (2015). Comparing methods for identifying biologically implausible values in height, weight, and body mass index among youth. American Journal of Epidemiology, 182(4), 359–365. https://doi.org/10.1093/aje/kwv057\n\n\nLyons-Amos, M., & Stones, T. (2017). Trends in demographic and health survey data quality: An analysis of age heaping over time in 34 countries in sub saharan Africa between 1987 and 2015. BMC Research Notes, 10(1), 760. https://doi.org/10.1186/s13104-017-3091-x\n\n\nMei, Z. (2007). Standard deviation of anthropometric Z-scores as a data quality assessment tool using the 2006 WHO growth standards: A cross country analysis. Bulletin of the World Health Organization, 85(6), 441–448. https://doi.org/10.2471/BLT.06.034421\n\n\nMourão, E., Gallo, C. D. O., Nascimento, F. A. D., & Jaime, P. C. (2020). Tendência temporal da cobertura do Sistema de Vigilância Alimentar e Nutricional entre crianças menores de 5 anos da região Norte do Brasil, 2008-2017*. Epidemiologia e Serviços de Saúde, 29(2). https://doi.org/10.5123/S1679-49742020000200026\n\n\nNannan, N., Dorrington, R., & Bradshaw, D. (2019). Estimating completeness of birth registration in South Africa, 1996 – 2011. Bulletin of the World Health Organization, 97(7), 468–476. https://doi.org/10.2471/BLT.18.222620\n\n\nNascimento, F. A. D., Silva, S. A. D., & Jaime, P. C. (2017). Cobertura da avaliação do estado nutricional no Sistema de Vigilância Alimentar e Nutricional brasileiro: 2008 a 2013. Cadernos de Saúde Pública, 33(12). https://doi.org/10.1590/0102-311x00161516\n\n\nPerumal, N., Namaste, S., Qamar, H., Aimone, A., Bassani, D. G., & Roth, D. E. (2020). Anthropometric data quality assessment in multisurvey studies of child growth. The American Journal of Clinical Nutrition, 112, 806S–815S. https://doi.org/10.1093/ajcn/nqaa162\n\n\nR Core Team. (n.d.). R: A language and environment for statistical computing [Computer software]. R Foundation for Statistical Computing. https://www.R-project.org\n\n\nSilva, N. de J., Silva, J. F. de M. e, Carrilho, T. R. B., Pinto, E. de J., Andrade, R. da C. S. de, Silva, S. A., Pedroso, J., Spaniol, A. M., Bortolini, G. A., Fagundes, A., Nilson, E. A. F., Fiaccone, R. L., Kac, G., Barreto, M. L., & Ribeiro-Silva, R. de C. (2023). Qualidade dos dados antropométricos infantis do Sisvan, Brasil, 2008-2017. Revista de Saúde Pública, 57(1, 1), 62–62. https://doi.org/10.11606/s1518-8787.2023057004655\n\n\nSistema de Vigilância Alimentar e Nutricional. (n.d.). Estado nutricional [Data set]. openDataSUS. Retrieved November 16, 2023, from https://opendatasus.saude.gov.br/dataset/sisvan-estado-nutricional\n\n\nWickham, H. (2023). The tidy tools manifesto. Tidyverse. https://tidyverse.tidyverse.org/articles/manifesto.html\n\n\nWickham, H., Çetinkaya-Rundel, M., & Grolemund, G. (2023). R for data science: Import, tidy, transform, visualize, and model data (2nd ed.). O’Reilly Media. https://r4ds.hadley.nz"
  }
]